class No:
    def __init__(self, valor):
        self.valor = valor
        self.proximo = None

class Pilha:
    def __init__(self):
        self._topo = None
        self.tamanho = 0
   
    def __len__(self):
        return self.tamanho
   
    def is_empty(self):
        return self.tamanho == 0
   
    def push(self, valor):
        no = No(valor)
        no.proximo = self._topo
        self._topo = no
        self.tamanho += 1
   
    def pop(self):
        if self.is_empty():
            raise IndexError("A pilha está vazia")
        valor = self._topo.valor
        self._topo = self._topo.proximo
        self.tamanho -= 1
        return valor
   
    def topo(self):
        if self.is_empty():
            raise IndexError("A pilha está vazia")
        return self._topo.valor
    
    #Escreva um programa que leia uma string contendo caracteres (, ), {, }, 
    #[ e ], e use uma pilha para verificar se os caracteres estão balanceados
    
    
    
def verificar_balanceamento(s):
    pilha = Pilha()
    for c in s:
        if c in '([{':
            pilha.push(c)
        elif c in ')]}':
            if pilha.is_empty():
                return False
            topo = pilha.pop()
            if (c == ')' and topo != '(') or (c == ']' and topo != '[') or (c == '}' and topo != '{'):
                return False

    return pilha.is_empty()

entrada = input("Digite uma string: ")

resultado = verificar_balanceamento(entrada)

if resultado:
    print("Os caracteres estão balanceados")
else:
    print("Os caracteres não estão balanceados")